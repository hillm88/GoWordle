// Code generated by pegomock. DO NOT EDIT.
// Source: rga_interface.go

package rga

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockprivateMethodInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockprivateMethodInterface(options ...pegomock.Option) *MockprivateMethodInterface {
	mock := &MockprivateMethodInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockprivateMethodInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockprivateMethodInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockprivateMethodInterface) mapIt(listOfWords []string) map[string]string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{listOfWords}
	result := pegomock.GetGenericMockFrom(mock).Invoke("mapIt", params, []reflect.Type{reflect.TypeOf((*map[string]string)(nil)).Elem()})
	var ret0 map[string]string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]string)
		}
	}
	return ret0
}

func (mock *MockprivateMethodInterface) getText(link string) ([]string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{link}
	result := pegomock.GetGenericMockFrom(mock).Invoke("getText", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockprivateMethodInterface) backUpFiles(backUpFile string) ([]string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{backUpFile}
	result := pegomock.GetGenericMockFrom(mock).Invoke("backUpFiles", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockprivateMethodInterface) fileRetriever(fileLink string, backUpLocalPath string) ([]string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{fileLink, backUpLocalPath}
	result := pegomock.GetGenericMockFrom(mock).Invoke("fileRetriever", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockprivateMethodInterface) VerifyWasCalledOnce() *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockprivateMethodInterface struct {
	mock                   *MockprivateMethodInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockprivateMethodInterface) mapIt(listOfWords []string) *MockprivateMethodInterface_mapIt_OngoingVerification {
	params := []pegomock.Param{listOfWords}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "mapIt", params, verifier.timeout)
	return &MockprivateMethodInterface_mapIt_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_mapIt_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_mapIt_OngoingVerification) GetCapturedArguments() []string {
	listOfWords := c.GetAllCapturedArguments()
	return listOfWords[len(listOfWords)-1]
}

func (c *MockprivateMethodInterface_mapIt_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) getText(link string) *MockprivateMethodInterface_getText_OngoingVerification {
	params := []pegomock.Param{link}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "getText", params, verifier.timeout)
	return &MockprivateMethodInterface_getText_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_getText_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_getText_OngoingVerification) GetCapturedArguments() string {
	link := c.GetAllCapturedArguments()
	return link[len(link)-1]
}

func (c *MockprivateMethodInterface_getText_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) backUpFiles(backUpFile string) *MockprivateMethodInterface_backUpFiles_OngoingVerification {
	params := []pegomock.Param{backUpFile}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "backUpFiles", params, verifier.timeout)
	return &MockprivateMethodInterface_backUpFiles_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_backUpFiles_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_backUpFiles_OngoingVerification) GetCapturedArguments() string {
	backUpFile := c.GetAllCapturedArguments()
	return backUpFile[len(backUpFile)-1]
}

func (c *MockprivateMethodInterface_backUpFiles_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) fileRetriever(fileLink string, backUpLocalPath string) *MockprivateMethodInterface_fileRetriever_OngoingVerification {
	params := []pegomock.Param{fileLink, backUpLocalPath}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "fileRetriever", params, verifier.timeout)
	return &MockprivateMethodInterface_fileRetriever_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_fileRetriever_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_fileRetriever_OngoingVerification) GetCapturedArguments() (string, string) {
	fileLink, backUpLocalPath := c.GetAllCapturedArguments()
	return fileLink[len(fileLink)-1], backUpLocalPath[len(backUpLocalPath)-1]
}

func (c *MockprivateMethodInterface_fileRetriever_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

type MockvalidatorInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockvalidatorInterface(options ...pegomock.Option) *MockvalidatorInterface {
	mock := &MockvalidatorInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockvalidatorInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockvalidatorInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockvalidatorInterface) validateBackUpPath(path string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockvalidatorInterface().")
	}
	params := []pegomock.Param{path}
	result := pegomock.GetGenericMockFrom(mock).Invoke("validateBackUpPath", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockvalidatorInterface) VerifyWasCalledOnce() *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockvalidatorInterface struct {
	mock                   *MockvalidatorInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockvalidatorInterface) validateBackUpPath(path string) *MockvalidatorInterface_validateBackUpPath_OngoingVerification {
	params := []pegomock.Param{path}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "validateBackUpPath", params, verifier.timeout)
	return &MockvalidatorInterface_validateBackUpPath_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockvalidatorInterface_validateBackUpPath_OngoingVerification struct {
	mock              *MockvalidatorInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockvalidatorInterface_validateBackUpPath_OngoingVerification) GetCapturedArguments() string {
	path := c.GetAllCapturedArguments()
	return path[len(path)-1]
}

func (c *MockvalidatorInterface_validateBackUpPath_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
