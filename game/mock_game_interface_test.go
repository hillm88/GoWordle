// Code generated by pegomock. DO NOT EDIT.
// Source: game_interface.go

package game

import (
	pegomock "github.com/petergtz/pegomock"
	view "masonwordle/view"
	"reflect"
	"time"
)

type MockinptInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockinptInterface(options ...pegomock.Option) *MockinptInterface {
	mock := &MockinptInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockinptInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockinptInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockinptInterface) GetValidWordInput() (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockinptInterface().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetValidWordInput", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockinptInterface) VerifyWasCalledOnce() *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockinptInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockinptInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockinptInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockinptInterface struct {
	mock                   *MockinptInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockinptInterface) GetValidWordInput() *MockinptInterface_GetValidWordInput_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetValidWordInput", params, verifier.timeout)
	return &MockinptInterface_GetValidWordInput_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockinptInterface_GetValidWordInput_OngoingVerification struct {
	mock              *MockinptInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockinptInterface_GetValidWordInput_OngoingVerification) GetCapturedArguments() {
}

func (c *MockinptInterface_GetValidWordInput_OngoingVerification) GetAllCapturedArguments() {
}

type MockviewInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockviewInterface(options ...pegomock.Option) *MockviewInterface {
	mock := &MockviewInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockviewInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockviewInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockviewInterface) DisplayRules() {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockviewInterface().")
	}
	params := []pegomock.Param{}
	pegomock.GetGenericMockFrom(mock).Invoke("DisplayRules", params, []reflect.Type{})
}

func (mock *MockviewInterface) LetterColoring(l *view.LettersToColor) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockviewInterface().")
	}
	params := []pegomock.Param{l}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LetterColoring", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockviewInterface) VerifyWasCalledOnce() *VerifierMockviewInterface {
	return &VerifierMockviewInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockviewInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockviewInterface {
	return &VerifierMockviewInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockviewInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockviewInterface {
	return &VerifierMockviewInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockviewInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockviewInterface {
	return &VerifierMockviewInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockviewInterface struct {
	mock                   *MockviewInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockviewInterface) DisplayRules() *MockviewInterface_DisplayRules_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DisplayRules", params, verifier.timeout)
	return &MockviewInterface_DisplayRules_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockviewInterface_DisplayRules_OngoingVerification struct {
	mock              *MockviewInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockviewInterface_DisplayRules_OngoingVerification) GetCapturedArguments() {
}

func (c *MockviewInterface_DisplayRules_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockviewInterface) LetterColoring(l *view.LettersToColor) *MockviewInterface_LetterColoring_OngoingVerification {
	params := []pegomock.Param{l}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LetterColoring", params, verifier.timeout)
	return &MockviewInterface_LetterColoring_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockviewInterface_LetterColoring_OngoingVerification struct {
	mock              *MockviewInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockviewInterface_LetterColoring_OngoingVerification) GetCapturedArguments() *view.LettersToColor {
	l := c.GetAllCapturedArguments()
	return l[len(l)-1]
}

func (c *MockviewInterface_LetterColoring_OngoingVerification) GetAllCapturedArguments() (_param0 []*view.LettersToColor) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*view.LettersToColor, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*view.LettersToColor)
		}
	}
	return
}

type MockconverterInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockconverterInterface(options ...pegomock.Option) *MockconverterInterface {
	mock := &MockconverterInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockconverterInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockconverterInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockconverterInterface) toCreateLetterColoring(letterPosition []PositionType, guess string) *view.LettersToColor {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockconverterInterface().")
	}
	params := []pegomock.Param{letterPosition, guess}
	result := pegomock.GetGenericMockFrom(mock).Invoke("toCreateLetterColoring", params, []reflect.Type{reflect.TypeOf((**view.LettersToColor)(nil)).Elem()})
	var ret0 *view.LettersToColor
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*view.LettersToColor)
		}
	}
	return ret0
}

func (mock *MockconverterInterface) VerifyWasCalledOnce() *VerifierMockconverterInterface {
	return &VerifierMockconverterInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockconverterInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockconverterInterface {
	return &VerifierMockconverterInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockconverterInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockconverterInterface {
	return &VerifierMockconverterInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockconverterInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockconverterInterface {
	return &VerifierMockconverterInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockconverterInterface struct {
	mock                   *MockconverterInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockconverterInterface) toCreateLetterColoring(letterPosition []PositionType, guess string) *MockconverterInterface_toCreateLetterColoring_OngoingVerification {
	params := []pegomock.Param{letterPosition, guess}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "toCreateLetterColoring", params, verifier.timeout)
	return &MockconverterInterface_toCreateLetterColoring_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockconverterInterface_toCreateLetterColoring_OngoingVerification struct {
	mock              *MockconverterInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockconverterInterface_toCreateLetterColoring_OngoingVerification) GetCapturedArguments() ([]PositionType, string) {
	letterPosition, guess := c.GetAllCapturedArguments()
	return letterPosition[len(letterPosition)-1], guess[len(guess)-1]
}

func (c *MockconverterInterface_toCreateLetterColoring_OngoingVerification) GetAllCapturedArguments() (_param0 [][]PositionType, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]PositionType, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]PositionType)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

type MockvalidatorInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockvalidatorInterface(options ...pegomock.Option) *MockvalidatorInterface {
	mock := &MockvalidatorInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockvalidatorInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockvalidatorInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockvalidatorInterface) validateGuess(input string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockvalidatorInterface().")
	}
	params := []pegomock.Param{input}
	result := pegomock.GetGenericMockFrom(mock).Invoke("validateGuess", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockvalidatorInterface) validateGame(g *GameState) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockvalidatorInterface().")
	}
	params := []pegomock.Param{g}
	result := pegomock.GetGenericMockFrom(mock).Invoke("validateGame", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockvalidatorInterface) VerifyWasCalledOnce() *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockvalidatorInterface struct {
	mock                   *MockvalidatorInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockvalidatorInterface) validateGuess(input string) *MockvalidatorInterface_validateGuess_OngoingVerification {
	params := []pegomock.Param{input}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "validateGuess", params, verifier.timeout)
	return &MockvalidatorInterface_validateGuess_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockvalidatorInterface_validateGuess_OngoingVerification struct {
	mock              *MockvalidatorInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockvalidatorInterface_validateGuess_OngoingVerification) GetCapturedArguments() string {
	input := c.GetAllCapturedArguments()
	return input[len(input)-1]
}

func (c *MockvalidatorInterface_validateGuess_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockvalidatorInterface) validateGame(g *GameState) *MockvalidatorInterface_validateGame_OngoingVerification {
	params := []pegomock.Param{g}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "validateGame", params, verifier.timeout)
	return &MockvalidatorInterface_validateGame_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockvalidatorInterface_validateGame_OngoingVerification struct {
	mock              *MockvalidatorInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockvalidatorInterface_validateGame_OngoingVerification) GetCapturedArguments() *GameState {
	g := c.GetAllCapturedArguments()
	return g[len(g)-1]
}

func (c *MockvalidatorInterface_validateGame_OngoingVerification) GetAllCapturedArguments() (_param0 []*GameState) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*GameState, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*GameState)
		}
	}
	return
}

type MockprivateMethodInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockprivateMethodInterface(options ...pegomock.Option) *MockprivateMethodInterface {
	mock := &MockprivateMethodInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockprivateMethodInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockprivateMethodInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockprivateMethodInterface) letterPositionWinCheckerAndSetter(g *GameState, guess string) (bool, []PositionType, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{g, guess}
	result := pegomock.GetGenericMockFrom(mock).Invoke("letterPositionWinCheckerAndSetter", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*[]PositionType)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 []PositionType
	var ret2 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].([]PositionType)
		}
		if result[2] != nil {
			ret2 = result[2].(error)
		}
	}
	return ret0, ret1, ret2
}

func (mock *MockprivateMethodInterface) isValidGuess(g *GameState, input string, listOfPreviousGuesses map[string]string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{g, input, listOfPreviousGuesses}
	result := pegomock.GetGenericMockFrom(mock).Invoke("isValidGuess", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockprivateMethodInterface) playTheGameForSixRounds(g *GameState) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{g}
	result := pegomock.GetGenericMockFrom(mock).Invoke("playTheGameForSixRounds", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockprivateMethodInterface) addToMap(currentMap map[string]string, word string) map[string]string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{currentMap, word}
	result := pegomock.GetGenericMockFrom(mock).Invoke("addToMap", params, []reflect.Type{reflect.TypeOf((*map[string]string)(nil)).Elem()})
	var ret0 map[string]string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]string)
		}
	}
	return ret0
}

func (mock *MockprivateMethodInterface) VerifyWasCalledOnce() *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockprivateMethodInterface struct {
	mock                   *MockprivateMethodInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockprivateMethodInterface) letterPositionWinCheckerAndSetter(g *GameState, guess string) *MockprivateMethodInterface_letterPositionWinCheckerAndSetter_OngoingVerification {
	params := []pegomock.Param{g, guess}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "letterPositionWinCheckerAndSetter", params, verifier.timeout)
	return &MockprivateMethodInterface_letterPositionWinCheckerAndSetter_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_letterPositionWinCheckerAndSetter_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_letterPositionWinCheckerAndSetter_OngoingVerification) GetCapturedArguments() (*GameState, string) {
	g, guess := c.GetAllCapturedArguments()
	return g[len(g)-1], guess[len(guess)-1]
}

func (c *MockprivateMethodInterface_letterPositionWinCheckerAndSetter_OngoingVerification) GetAllCapturedArguments() (_param0 []*GameState, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*GameState, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*GameState)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) isValidGuess(g *GameState, input string, listOfPreviousGuesses map[string]string) *MockprivateMethodInterface_isValidGuess_OngoingVerification {
	params := []pegomock.Param{g, input, listOfPreviousGuesses}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "isValidGuess", params, verifier.timeout)
	return &MockprivateMethodInterface_isValidGuess_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_isValidGuess_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_isValidGuess_OngoingVerification) GetCapturedArguments() (*GameState, string, map[string]string) {
	g, input, listOfPreviousGuesses := c.GetAllCapturedArguments()
	return g[len(g)-1], input[len(input)-1], listOfPreviousGuesses[len(listOfPreviousGuesses)-1]
}

func (c *MockprivateMethodInterface_isValidGuess_OngoingVerification) GetAllCapturedArguments() (_param0 []*GameState, _param1 []string, _param2 []map[string]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*GameState, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*GameState)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]map[string]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(map[string]string)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) playTheGameForSixRounds(g *GameState) *MockprivateMethodInterface_playTheGameForSixRounds_OngoingVerification {
	params := []pegomock.Param{g}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "playTheGameForSixRounds", params, verifier.timeout)
	return &MockprivateMethodInterface_playTheGameForSixRounds_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_playTheGameForSixRounds_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_playTheGameForSixRounds_OngoingVerification) GetCapturedArguments() *GameState {
	g := c.GetAllCapturedArguments()
	return g[len(g)-1]
}

func (c *MockprivateMethodInterface_playTheGameForSixRounds_OngoingVerification) GetAllCapturedArguments() (_param0 []*GameState) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*GameState, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*GameState)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) addToMap(currentMap map[string]string, word string) *MockprivateMethodInterface_addToMap_OngoingVerification {
	params := []pegomock.Param{currentMap, word}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "addToMap", params, verifier.timeout)
	return &MockprivateMethodInterface_addToMap_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_addToMap_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_addToMap_OngoingVerification) GetCapturedArguments() (map[string]string, string) {
	currentMap, word := c.GetAllCapturedArguments()
	return currentMap[len(currentMap)-1], word[len(word)-1]
}

func (c *MockprivateMethodInterface_addToMap_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]map[string]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(map[string]string)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}
