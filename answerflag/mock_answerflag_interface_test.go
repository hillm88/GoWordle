// Code generated by pegomock. DO NOT EDIT.
// Source: answerflag_interface.go

package answerflag

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockprivateMethodInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockprivateMethodInterface(options ...pegomock.Option) *MockprivateMethodInterface {
	mock := &MockprivateMethodInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockprivateMethodInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockprivateMethodInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockprivateMethodInterface) getAnswer(answerList []string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{answerList}
	result := pegomock.GetGenericMockFrom(mock).Invoke("getAnswer", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockprivateMethodInterface) setAnswer(validAnswers map[string]string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{validAnswers}
	result := pegomock.GetGenericMockFrom(mock).Invoke("setAnswer", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockprivateMethodInterface) isValidListSize(aList []string) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockprivateMethodInterface().")
	}
	params := []pegomock.Param{aList}
	result := pegomock.GetGenericMockFrom(mock).Invoke("isValidListSize", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockprivateMethodInterface) VerifyWasCalledOnce() *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockprivateMethodInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockprivateMethodInterface {
	return &VerifierMockprivateMethodInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockprivateMethodInterface struct {
	mock                   *MockprivateMethodInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockprivateMethodInterface) getAnswer(answerList []string) *MockprivateMethodInterface_getAnswer_OngoingVerification {
	params := []pegomock.Param{answerList}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "getAnswer", params, verifier.timeout)
	return &MockprivateMethodInterface_getAnswer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_getAnswer_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_getAnswer_OngoingVerification) GetCapturedArguments() []string {
	answerList := c.GetAllCapturedArguments()
	return answerList[len(answerList)-1]
}

func (c *MockprivateMethodInterface_getAnswer_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) setAnswer(validAnswers map[string]string) *MockprivateMethodInterface_setAnswer_OngoingVerification {
	params := []pegomock.Param{validAnswers}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "setAnswer", params, verifier.timeout)
	return &MockprivateMethodInterface_setAnswer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_setAnswer_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_setAnswer_OngoingVerification) GetCapturedArguments() map[string]string {
	validAnswers := c.GetAllCapturedArguments()
	return validAnswers[len(validAnswers)-1]
}

func (c *MockprivateMethodInterface_setAnswer_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]map[string]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(map[string]string)
		}
	}
	return
}

func (verifier *VerifierMockprivateMethodInterface) isValidListSize(aList []string) *MockprivateMethodInterface_isValidListSize_OngoingVerification {
	params := []pegomock.Param{aList}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "isValidListSize", params, verifier.timeout)
	return &MockprivateMethodInterface_isValidListSize_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockprivateMethodInterface_isValidListSize_OngoingVerification struct {
	mock              *MockprivateMethodInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockprivateMethodInterface_isValidListSize_OngoingVerification) GetCapturedArguments() []string {
	aList := c.GetAllCapturedArguments()
	return aList[len(aList)-1]
}

func (c *MockprivateMethodInterface_isValidListSize_OngoingVerification) GetAllCapturedArguments() (_param0 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]string)
		}
	}
	return
}

type MockvalidatorInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockvalidatorInterface(options ...pegomock.Option) *MockvalidatorInterface {
	mock := &MockvalidatorInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockvalidatorInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockvalidatorInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockvalidatorInterface) validateAnswerLists(a *AnswerInfoHolder) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockvalidatorInterface().")
	}
	params := []pegomock.Param{a}
	result := pegomock.GetGenericMockFrom(mock).Invoke("validateAnswerLists", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockvalidatorInterface) VerifyWasCalledOnce() *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockvalidatorInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockvalidatorInterface {
	return &VerifierMockvalidatorInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockvalidatorInterface struct {
	mock                   *MockvalidatorInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockvalidatorInterface) validateAnswerLists(a *AnswerInfoHolder) *MockvalidatorInterface_validateAnswerLists_OngoingVerification {
	params := []pegomock.Param{a}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "validateAnswerLists", params, verifier.timeout)
	return &MockvalidatorInterface_validateAnswerLists_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockvalidatorInterface_validateAnswerLists_OngoingVerification struct {
	mock              *MockvalidatorInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockvalidatorInterface_validateAnswerLists_OngoingVerification) GetCapturedArguments() *AnswerInfoHolder {
	a := c.GetAllCapturedArguments()
	return a[len(a)-1]
}

func (c *MockvalidatorInterface_validateAnswerLists_OngoingVerification) GetAllCapturedArguments() (_param0 []*AnswerInfoHolder) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*AnswerInfoHolder, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*AnswerInfoHolder)
		}
	}
	return
}

type MockinptInterface struct {
	fail func(message string, callerSkip ...int)
}

func NewMockinptInterface(options ...pegomock.Option) *MockinptInterface {
	mock := &MockinptInterface{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockinptInterface) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockinptInterface) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockinptInterface) GetValidWordInput() (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockinptInterface().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetValidWordInput", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockinptInterface) VerifyWasCalledOnce() *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockinptInterface) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockinptInterface) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockinptInterface) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockinptInterface {
	return &VerifierMockinptInterface{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockinptInterface struct {
	mock                   *MockinptInterface
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockinptInterface) GetValidWordInput() *MockinptInterface_GetValidWordInput_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetValidWordInput", params, verifier.timeout)
	return &MockinptInterface_GetValidWordInput_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockinptInterface_GetValidWordInput_OngoingVerification struct {
	mock              *MockinptInterface
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockinptInterface_GetValidWordInput_OngoingVerification) GetCapturedArguments() {
}

func (c *MockinptInterface_GetValidWordInput_OngoingVerification) GetAllCapturedArguments() {
}
